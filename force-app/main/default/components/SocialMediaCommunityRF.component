<apex:component >
<style>
   
div.content.inactive {
    display: none;
}

ol#toc {
    height: 2em;
    list-style: none;
    margin: 0;
    padding: 0;
}

ol#toc a {
    background: #ffb258;
    color: #fff;
    display: block;
    float: left;
    height: 2em;
    padding-left: 10px;
    text-decoration: none;
}

ol#toc a:hover {
    background-color: #ffb258;
    background-position: 0 -120px;
}

ol#toc a:hover span {
    background-position: 100% -120px;
}

ol#toc li {
    float: left;
    margin: 0 1px 0 0;
}

ol#toc li a.active {
    background-color: #e76802;
    background-position: 0 -60px;
    color: #fff;
    font-weight: bold;
}

ol#toc li a.active span {
    background-position: 100% -60px;
}

ol#toc span {
    background: url(tabs.gif) 100% 0;
    display: block;
    line-height: 2em;
    padding-right: 10px;
}
.twitter-timeline{margin-top:10px;}
</style>



<div id="rightContent" class="rightContent"
                            style="padding-right: 0px;background-color:white; float:right; width:260px; margin-top:-27px; height:1000px; z-index:10;right:15px;left:auto;">
                            <img id="liveagent_button_online_573M00000004CBT" style="display: none; border: 0px none; cursor: pointer" onclick="liveagent.startChat('573M00000004CBT')" src="https://develop17-nxpsemiconductors.cs7.force.com/resource/1406706266000/NXPLiveChatOnlineNew" /><img id="liveagent_button_offline_573M00000004CBT" style="display: none; border: 0px none; " src="https://develop17-nxpsemiconductors.cs7.force.com/resource/1406706180000/NXPLiveChatOfflineNew" />
                            
                            
                            
                    <div class="tabs-container clearfix tabsMargin" style="width:250px;">
            <ul class="tabs">
                <li style="visibility: visible;">
                    <a title="NXP TechSupport" class="current" href="#page-1" id="tab_1">
                        <span class="tab-left"><span class="tab-right">NXP TechSupport</span></span>
                    </a>
                </li>
                <li style="visibility: visible;">
                    <a title="RF"  href="#page-3" id="tab_2">
                        <span class="tab-left"><span class="tab-right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RF &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>
                    </a>
                </li>
                
            </ul>
            <div class="tab-container" style="width:270px;">
                <div class="top-left">
                    <div class="top-right">
                        <div class="top-middle"><!--_--></div>
                    </div>
                </div>
                <div class="middle-left">
                    <div class="middle-right">
                        <div class="middle panes">
                            <div id="section_products" class="noborder top">
                                <div class="article-header">
                                   <!-- <h2 class="nxp-darkgreen">Title tab content</h2>
                                    <span class="center-dotted"><!--_--><!--</span>-->
                                </div>
                                <div class="article-content">
                                    
<div class="content" id="page-1">

    <p><div class="fb-like-box" data-href="https://www.facebook.com/nxptechsupport" data-colorscheme="light" width="230" data-show-faces="true" data-header="false" data-stream="true" data-show-border="false"></div>
</p>
    <a class="twitter-timeline"  href="https://twitter.com/NXPTechSupport"  
 		data-widget-id="481668095556075521"  height="280" width="230" lang="EN">Tweets by @NXPTechSupport</a>
                            
</div>
</div>
<div class="content" id="page-2">
</div>
<div class="content" id="page-3">
 
    <p> <div class="fb-like-box"  data-href= "https://www.facebook.com/nxpsemi" data-colorscheme="light"  width="230" data-show-faces="true" data-header="false" data-stream="true" data-show-border="false"></div>
</p>
    <p> <div class="twitter-timeline"   data-href=" https://twitter.com/thesmallsignal" data-widget-id="481668095556075521"  height="280" width="230" lang="EN" data-show-faces="true" data-header="false" data-stream="true" data-show-border="false"></div>
</p>                            
</div>
                            <!---------------------Facebook----------------------->
                           <!------------------Twitter ---------------------->


                                
                            </div>
                            
                            <br style="clear:both"/>
                        </div>
                    </div>
                    <div class="bottom-left">
                        <div class="bottom-right">
                            <div class="bottom-middle"><!--_--></div>
                        </div>
                    </div>
                </div>
            </div>
             
        </div>          
     
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
    </div>
<script>
// Wrapped in a function so as to not pollute the global scope.
var activatables = (function () {
// The CSS classes to use for active/inactive elements.
var activeClass = 'current';
var inactiveClass = 'inactive';

var anchors = {}, activates = {};
var regex = /#([A-Za-z][A-Za-z0-9:._-]*)$/;

// Find all anchors (<a href="#something">.)
var temp = document.getElementsByTagName('a');
for (var i = 0; i < temp.length; i++) {
    var a = temp[i];

    // Make sure the anchor isn't linking to another page.
    if ((a.pathname != location.pathname &&
        '/' + a.pathname != location.pathname) ||
        a.search != location.search) continue;

    // Make sure the anchor has a hash part.
    var match = regex.exec(a.href);
    if (!match) continue;
    var id = match[1];

    // Add the anchor to a lookup table.
    if (id in anchors)
        anchors[id].push(a);
    else
        anchors[id] = [a];
}

// Adds/removes the active/inactive CSS classes depending on whether the
// element is active or not.
function setClass(elem, active) {
    var classes = elem.className.split(/\s+/);
    var cls = active ? activeClass : inactiveClass, found = false;
    for (var i = 0; i < classes.length; i++) {
        if (classes[i] == activeClass || classes[i] == inactiveClass) {
            if (!found) {
                classes[i] = cls;
                found = true;
            } else {
                delete classes[i--];
            }
        }
    }

    if (!found) classes.push(cls);
    elem.className = classes.join(' ');
}

// Functions for managing the hash.
function getParams() {
    var hash = location.hash || '#';
    var parts = hash.substring(1).split('&');

    var params = {};
    for (var i = 0; i < parts.length; i++) {
        var nv = parts[i].split('=');
        if (!nv[0]) continue;
        params[nv[0]] = nv[1] || null;
    }
    
    return params;
}

function setParams(params) {
    var parts = [];
    for (var name in params) {
        parts.push(params[name] ? name + '=' + params[name] : name);
    }

    location.hash = knownHash = '#' + parts.join('&');
}

// Looks for changes to the hash.
var knownHash = location.hash;
function pollHash() {
    var hash = location.hash;
    if (hash != knownHash) {
        var params = getParams();
        for (var name in params) {
            if (!(name in activates)) continue;
            activates[name](params[name]);
        }
        knownHash = hash;
    }
}
setInterval(pollHash, 250);

function getParam(name) {
    var params = getParams();
    return params[name];
}

function setParam(name, value) {
    var params = getParams();
    params[name] = value;
    setParams(params);
}

// If the hash is currently set to something that looks like a single id,
// automatically activate any elements with that id.
var initialId = null;
var match = regex.exec(knownHash);
if (match) {
    initialId = match[1];
    //location.hash = '#';
}

// Takes an array of either element IDs or a hash with the element ID as the key
// and an array of sub-element IDs as the value.
// When activating these sub-elements, all parent elements will also be
// activated in the process.
function makeActivatable(paramName, activatables) {
    var all = {}, first = initialId;

    // Activates all elements for a specific id (and inactivates the others.)
    function activate(id) {
        if (!(id in all)) return false;

        for (var cur in all) {
            if (cur == id) continue;
            for (var i = 0; i < all[cur].length; i++) {
                setClass(all[cur][i], false);
            }
        }

        for (var i = 0; i < all[id].length; i++) {
            setClass(all[id][i], true);
        }

        setParam(paramName, id);

        return true;
    }

    activates[paramName] = activate;

    function attach(item, basePath) {
        if (item instanceof Array) {
            for (var i = 0; i < item.length; i++) {
                attach(item[i], basePath);
            }
        } else if (typeof item == 'object') {
            for (var p in item) {
                var path = attach(p, basePath);
                attach(item[p], path);
            }
        } else if (typeof item == 'string') {
            var path = basePath ? basePath.slice(0) : [];
            var e = document.getElementById(item);
            if (!e) throw 'Could not find "' + item + '".'
            path.push(e);

            if (!first) first = item;

            // Store the elements in a lookup table.
            all[item] = path;

            // Attach a function that will activate the appropriate element
            // to all anchors.
            if (item in anchors) {
                // Create a function that will call the 'activate' function with
                // the proper parameters. It will be used as the event callback.
                var func = (function (id) {
                    return function (e) {
                        activate(id);

                        if (!e) e = window.event;
                        if (e.preventDefault) e.preventDefault();
                        e.returnValue = false;
                        return false;
                    };
                })(item);

                for (var i = 0; i < anchors[item].length; i++) {
                    var a = anchors[item][i];

                    if (a.addEventListener) {
                        a.addEventListener('click', func, false);
                    } else if (a.attachEvent) {
                        a.attachEvent('onclick', func);
                    } else {
                        throw 'Unsupported event model.';
                    }

                    all[item].push(a);
                }
            }

            return path;
        } else {
            throw 'Unexpected type.';
        }

        return basePath;
    }

    attach(activatables);

    // Activate an element.
    if (first) activate(getParam(paramName)) || activate(first);
}

return makeActivatable;
})();
</script>
<script type="text/javascript">
activatables('page', ['page-1', 'page-2', 'page-3']);
</script>
           
</apex:component>